geom_line(data=data.sqrt,aes(x=x,y=y.add),colour ="red") +
geom_line(data=data.log,aes(x=x,y=y.add),colour ="black") +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title.y = element_text(vjust=0.35)
)
ggsave(paste(path.write,"g_compare_add.pdf",sep=""))
g.compare.part.D = g.part.D +
geom_line(data=data.sqrt,aes(x=x,y=y.part),colour ="red") +
geom_line(data=data.log,aes(x=x,y=y.part),colour ="black") +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title.y = element_text(vjust=0.35)
)
ggsave(paste(path.write,"g_compare_part.pdf",sep=""))
g.compare.full.D = g.full.D +
geom_line(data=data.sqrt,aes(x=x,y=y.full),colour ="red") +
geom_line(data=data.log,aes(x=x,y=y.full),colour ="black") +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12),
axis.title.y = element_text(vjust=0.35)
)
ggsave(paste(path.write,"g_compare_full.pdf",sep=""))
formula.np = choice ~ log(house) + price + add + part + full + price +
s(D,k=10) + s(add.D,k=10) + s(part.D,k=10) + s(full.D,k=10)
formula.sqrt = choice ~ log(house) + add + part + full + price +
sqrt(D) + sqrt(add.D) + sqrt(part.D) + sqrt(full.D)
formula.log = choice ~ log(house) + add + part + full + price +
log.D + log.add.D + log.part.D + log.full.D
#++++++++++++++++
# set parameters and empty objects
#++++++++++++++++
#--- WTP related  ---#
d0.list = c(0.5,1.5,2.5) # list of the base distance
d0.len = length(d0.list)
d.end = 4
#--- bootstrap related  ---#
set.seed(409438)
B = 1000
np.st.non = rep(list(list()),B)
p.sqrt.st = rep(list(list()),B)
p.log.st = rep(list(list()),B)
CJ.D.st = CJ.E.st = CJ.dif.st = matrix(0,B,d0.len) # storage of WTPs
id.list = unique(data$scsid)
id.len = length(id.list)
rows = list()
for (i in 1:id.len){
rows[[i]] = which(data$scsid==id.list[i])
}
#--- nml related  ---#
idname = "id.boot" # this is the only difference
qname = "question"
altname = "alt"
bstart=NULL
weight=NULL
sp=rep(0,4)
#---------------------------
# 2.1 Bootstrap
#---------------------------
for (i in 1:B){
print(paste("Iteration ",i,sep=""))
#++++++++++++
# Sampling
#++++++++++++
id.samp= sample(seq(1,id.len),id.len+2,replace=T)
rows.boot = id.boot = vector()
for (j in 1:(id.len+2)){
row.nums = rows[[id.samp[j]]]
row.len = length(row.nums)
rows.boot = c(rows.boot,row.nums)
id.boot = c(id.boot,rep(j,row.len))
}
data.boot = data[rows.boot,]
data.boot$id.boot = id.boot
temp = data.table(data.boot)
which(temp[,list(sum.c=sum(choice)),by="scsid,question"]==2)
#++++++++++++
# Estimation
#++++++++++++
np.non = nml(formula.np,idname=idname,altname=altname,qname=qname,
data=data.boot,sp=rep(4,4))
p.sqrt = nml(formula.sqrt,idname=idname,altname=altname,qname=qname,
data=data.boot,sp=rep(0,4))
p.log = nml(formula.log,idname=idname,altname=altname,qname=qname,
data=data.boot,sp=rep(0,4))
np.st.non[[i]] = np.non
p.sqrt.st[[i]] = p.sqrt
p.log.st[[i]] = p.log
}
save(np.st.non,file=paste(path.data,"BootConjointSP.RData",sep=""))
save(p.sqrt.st,file=paste(path.data,"BootConjointSqrt.RData",sep=""))
save(p.log.st,file=paste(path.data,"BootConjointLog.RData",sep=""))
path.data
library("foreign"); library("mgcv");library("fExtremes");library("MyNonparametric")
library("distrEx");library("BB");library("MyMisc");library("ggplot2")
# set some paths
path.write = "C:/Users/Taro/Documents/My Box Files/Collaborative Research/Hedonic/Braden testing paper/Writing/graph/"
path.data = "C:/Users/Taro/Documents/My Box Files/Collaborative Research/Hedonic/Braden testing paper/Buffalo/Conjoint/"
load(paste(path.data,"BootConjointSP.RData",sep=""))
load(paste(path.data,"BootConjointSqrt.RData",sep=""))
load(paste(path.data,"BootConjointLog.RData",sep=""))
path.write = "/Users/taromieno/Box Sync/Collaborative Research/Hedonic/Braden testing paper/Writing/graph/"
path.data = "/Users/taromieno/Box Sync/Collaborative Research/Hedonic/Braden testing paper/Buffalo/Conjoint/"
load(paste(path.data,"BootConjointSP.RData",sep=""))
load(paste(path.data,"BootConjointSqrt.RData",sep=""))
load(paste(path.data,"BootConjointLog.RData",sep=""))
np.st.non
length(np.st.non)
ls(np.st.non)
np.st.non$beta
np.st.non[[1]]
ls(np.st.non[[1]])
np.st.non[[1]]$beta
np.st.non[[1]]$graph.support$D
np.st.non[[1]]$graph.support
ls(np.st.non[[1]]$graph.support)
np.st.non[[1]]$graph.support$add.D
np.st.non[[1]]$graph.support$D
np.st.non[[1]]$graph.support$D$data.graph
np.st.non[[1]]$graph.support$D$data.graph$y
np.st.non[[1]]$graph.support$D$data.graph$x
y.D.sp = y.D.sqrt = y.D.log = matrix(0,1000,B)
for (i in 1:B){
y.D.sp[,i] = np.st.non[[i]]$graph.support$D$data.graph$y # semiparametric
y.D.sqrt[,i] = p.sqrt.st[[i]]$graph.support$D$data.graph$y # semiparametric
y.D.log[,i] = p.log.st[[i]]$graph.support$D$data.graph$y # semiparametric
}
y.D.sp.90CI = apply(y.D.sp, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.D.sqrt.90CI = apply(y.D.sqrt, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.D.log.90CI = apply(y.D.log, 1,function(x) quantile(x,prob=c(0.05,0.95)))
i=1
p.sqrt.st[[i]]$graph.support$D$data.graph$y
p.sqrt.st[[1]]
p.sqrt.st[[i]]
p.sqrt.st[[i]]$graph.support
p.log.st[[i]]$graph.support
p.sqrt.st[[i]]
p.sqrt.st[[i]]$beta
np.st.non[[i]]$graph.support$D$data.graph
dist = np.st.non[[i]]$graph.support$D$data.graph$x
dist
y.D.sp = y.D.sqrt = y.D.log = matrix(0,1000,B)
dist = np.st.non[[i]]$graph.support$D$data.graph$x
for (i in 1:B){
y.D.sp[,i] = np.st.non[[i]]$graph.support$D$data.graph$y # semiparametric
y.D.sqrt[,i] = p.sqrt.st[[i]]$beta["D"]*sqrt(dist) # semiparametric
y.D.log[,i] = p.log.st[[i]]$beta["D"]*log(1+dist) # semiparametric
}
y.D.log
dist
y.D.log
p.log.st[[i]]$beta["D"]
p.log.st[[i]]$beta
p.sqrt.st[[i]]$beta
p.sqrt.st[[i]]$beta["sqrt(D)"]
p.log.st[[i]]$beta["log.D"]
for (i in 1:B){
y.D.sp[,i] = np.st.non[[i]]$graph.support$D$data.graph$y # semiparametric
y.D.sqrt[,i] = p.sqrt.st[[i]]$beta["sqrt(D)"]*sqrt(dist) # semiparametric
y.D.log[,i] = p.log.st[[i]]$beta["log.D"]*log(1+dist) # semiparametric
}
y.D.log
y.D.sp.90CI = apply(y.D.sp, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.D.sqrt.90CI = apply(y.D.sqrt, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.D.log.90CI = apply(y.D.log, 1,function(x) quantile(x,prob=c(0.05,0.95)))
np.sqrt$beta
np.log$beta
data.graph.D = data.frame(x = dist,
y.sp = np.semi$graph.support$D$data.graph$y,
y05.sp = y.D.sp.90CI[1,],y95.sp = y.D.sp.90CI[2,],
y.sqrt = np.sqrt$beta["sqrt(D)"]*sqrt(dist),
y05.sqrt = y.D.sqrt.90CI[1,],y95.sp = y.D.sqrt.90CI[2,],
y.log = np.log$beta["log.D"]*log(dist),
y05.log = y.D.log.90CI[1,],y95.log = y.D.log.90CI[2,])
data.graph.D
g.D = ggplot(data=data.graph.D) +
geom_line(aes(x=x,y=y.sp),colour="blue")
g.D
g.D = ggplot(data=data.graph.D) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="orange")
g.D
data.graph.D = data.frame(x = dist,
y.sp = np.semi$graph.support$D$data.graph$y,
y05.sp = y.D.sp.90CI[1,],y95.sp = y.D.sp.90CI[2,],
y.sqrt = np.sqrt$beta["sqrt(D)"]*sqrt(dist),
y05.sqrt = y.D.sqrt.90CI[1,],y95.sp = y.D.sqrt.90CI[2,],
y.log = np.log$beta["log.D"]*log(1+dist),
y05.log = y.D.log.90CI[1,],y95.log = y.D.log.90CI[2,])
g.D = ggplot(data=data.graph.D) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="orange")
g.D
data.graph.D = data.frame(x = dist,
y.sp = np.semi$graph.support$D$data.graph$y,
y05.sp = y.D.sp.90CI[1,],y95.sp = y.D.sp.90CI[2,],
y.sqrt = np.sqrt$beta["sqrt(D)"]*sqrt(dist),
y05.sqrt = y.D.sqrt.90CI[1,],y95.sqrt = y.D.sqrt.90CI[2,],
y.log = np.log$beta["log.D"]*log(1+dist),
y05.log = y.D.log.90CI[1,],y95.log = y.D.log.90CI[2,])
# graph
g.D = ggplot(data=data.graph.D) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="orange") +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.2) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.2) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "orange",alpha = 0.2)
g.D
g.D = ggplot(data=data.graph.D) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green") +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4)
g.D
g.D = ggplot(data=data.graph.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green")
g.D
# graph
g.D = ggplot(data=data.graph.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green") +
geom_line(data=data.frame(x=0,y=seq(min(y.D.90CI[1,]),max(y.D.90CI[2,]),length=1000)),
aes(x=x,y=y)) +
geom_line(data=data.frame(x=np.semi$graph.support$D$data.graph$x,
y=0),aes(x=x,y=y)) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12)) +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.title.y = element_text(vjust=0.35),
axis.title.x = element_text(vjust=0.15)
)
ggsave(paste(path.write,"g_D_compare.pdf",sep=""))
g.D = ggplot(data=data.graph.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green") +
geom_line(data=data.frame(x=0,y=seq(min(y.D.sp.90CI[1,]),max(y.D.sp.90CI[2,]),length=1000)),
aes(x=x,y=y)) +
geom_line(data=data.frame(x=np.semi$graph.support$D$data.graph$x,
y=0),aes(x=x,y=y)) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12)) +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.title.y = element_text(vjust=0.35),
axis.title.x = element_text(vjust=0.15)
)
ggsave(paste(path.write,"g_D_compare.pdf",sep=""))
g.D
g.D = ggplot(data=data.graph.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green") +
geom_line(data=data.frame(x=0,y=seq(min(y.D.sqrt.90CI[1,]),max(y.D.sqrt.90CI[2,]),length=1000)),
aes(x=x,y=y)) +
geom_line(data=data.frame(x=np.semi$graph.support$D$data.graph$x,
y=0),aes(x=x,y=y)) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12)) +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.title.y = element_text(vjust=0.35),
axis.title.x = element_text(vjust=0.15)
)
ggsave(paste(path.write,"g_D_compare.pdf",sep=""))
g.D
np.st.non[[i]]$beta
p.sqrt.st[[i]]$graph.support$full.D
p.sqrt.st[[i]]$graph.support
p.sqrt.st[[i]]$beta
p.log.st[[i]]$beta
p.log.st[[i]]$beta["log.full.D"]
log(dist)
p.log.st[[i]]$beta["log.full.D"]*log(1+dist)
np.st.non[[i]]$beta["full"]
p.log.st[[i]]$beta["full"]
np.log$beta["log.full.D"]
y.full.sp = y.full.sqrt = y.full.log = matrix(0,1000,B)
dist = np.st.non[[i]]$graph.support$D$data.graph$x
for (i in 1:B){
y.full.sp[,i] = np.st.non[[i]]$graph.support$full.D$data.graph$y +
np.st.non[[i]]$beta["full"]
y.full.sqrt[,i] = p.sqrt.st[[i]]$beta["sqrt(full.D)"]*sqrt(dist) +
p.sqrt.st[[i]]$beta["full"]
y.full.log[,i] = p.log.st[[i]]$beta["log.full.D"]*log(1+dist) +
p.log.st[[i]]$beta["full"]
}
y.full.sp.90CI = apply(y.full.sp, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.full.sqrt.90CI = apply(y.full.sqrt, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.full.log.90CI = apply(y.full.log, 1,function(x) quantile(x,prob=c(0.05,0.95)))
# combine reg results of different models
data.graph.full.D = data.frame(x = dist,
y.sp = np.semi$graph.support$full.D$data.graph$y +
np.semi$beta["full"],
y05.sp = y.full.sp.90CI[1,],y95.sp = y.full.sp.90CI[2,],
y.sqrt = np.sqrt$beta["sqrt(full.D)"]*sqrt(dist) +
np.sqrt$beta["full"]
y05.sqrt = y.full.sqrt.90CI[1,],y95.sqrt = y.full.sqrt.90CI[2,],
y.log = np.log$beta["log.full.D"]*log(1+dist) +
np.log$beta["full"],
y05.log = y.full.log.90CI[1,],y95.log = y.full.log.90CI[2,])
#
np.sqrt$beta["full"]
np.sqrt$beta["sqrt(full.D)"]*sqrt(dist)
# combine reg results of different models
data.graph.full.D = data.frame(x = dist,
y.sp = np.semi$graph.support$full.D$data.graph$y +
np.semi$beta["full"],
y05.sp = y.full.sp.90CI[1,],y95.sp = y.full.sp.90CI[2,],
y.sqrt = np.sqrt$beta["sqrt(full.D)"]*sqrt(dist) +
np.sqrt$beta["full"]
y05.sqrt = y.full.sqrt.90CI[1,],y95.sqrt = y.full.sqrt.90CI[2,],
y.log = np.log$beta["log.full.D"]*log(1+dist) +
np.log$beta["full"],
y05.log = y.full.log.90CI[1,],y95.log = y.full.log.90CI[2,])
data.graph.full.D = data.frame(x = dist,
y.sp = np.semi$graph.support$full.D$data.graph$y +
np.semi$beta["full"],
y05.sp = y.full.sp.90CI[1,],y95.sp = y.full.sp.90CI[2,],
y.sqrt = np.sqrt$beta["sqrt(full.D)"]*sqrt(dist) +
np.sqrt$beta["full"],
y05.sqrt = y.full.sqrt.90CI[1,],y95.sqrt = y.full.sqrt.90CI[2,],
y.log = np.log$beta["log.full.D"]*log(1+dist) +
np.log$beta["full"],
y05.log = y.full.log.90CI[1,],y95.log = y.full.log.90CI[2,])
g.D = ggplot(data=data.graph.full.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4)
g.D
g.D = ggplot(data=data.graph.full.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green")
g.D
g.D
g.D = ggplot(data=data.graph.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green") +
geom_line(data=data.frame(x=0,y=seq(min(y.D.sqrt.90CI[1,]),max(y.D.sqrt.90CI[2,]),length=1000)),
aes(x=x,y=y)) +
geom_line(data=data.frame(x=np.semi$graph.support$D$data.graph$x,
y=0),aes(x=x,y=y)) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12)) +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.title.y = element_text(vjust=0.35),
axis.title.x = element_text(vjust=0.15)
)
ggsave(paste(path.write,"g_D_compare.pdf",sep=""))
# find confidence the intervals
y.D.sp = y.D.sqrt = y.D.log = matrix(0,1000,B)
dist = np.st.non[[i]]$graph.support$D$data.graph$x
for (i in 1:B){
y.D.sp[,i] = np.st.non[[i]]$graph.support$D$data.graph$y # semiparametric
y.D.sqrt[,i] = p.sqrt.st[[i]]$beta["sqrt(D)"]*sqrt(dist) # semiparametric
y.D.log[,i] = p.log.st[[i]]$beta["log.D"]*log(1+dist) # semiparametric
}
y.D.sp.90CI = apply(y.D.sp, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.D.sqrt.90CI = apply(y.D.sqrt, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.D.log.90CI = apply(y.D.log, 1,function(x) quantile(x,prob=c(0.05,0.95)))
# combine reg results of different models
data.graph.D = data.frame(x = dist,
y.sp = np.semi$graph.support$D$data.graph$y,
y05.sp = y.D.sp.90CI[1,],y95.sp = y.D.sp.90CI[2,],
y.sqrt = np.sqrt$beta["sqrt(D)"]*sqrt(dist),
y05.sqrt = y.D.sqrt.90CI[1,],y95.sqrt = y.D.sqrt.90CI[2,],
y.log = np.log$beta["log.D"]*log(1+dist),
y05.log = y.D.log.90CI[1,],y95.log = y.D.log.90CI[2,])
# graph
g.D = ggplot(data=data.graph.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green") +
geom_line(data=data.frame(x=0,y=seq(min(y.D.sqrt.90CI[1,]),max(y.D.sqrt.90CI[2,]),length=1000)),
aes(x=x,y=y)) +
geom_line(data=data.frame(x=np.semi$graph.support$D$data.graph$x,
y=0),aes(x=x,y=y)) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12)) +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.title.y = element_text(vjust=0.35),
axis.title.x = element_text(vjust=0.15)
)
ggsave(paste(path.write,"g_D_compare.pdf",sep=""))
g.D
g.full
g.full
y.full.sp = y.full.sqrt = y.full.log = matrix(0,1000,B)
dist = np.st.non[[i]]$graph.support$D$data.graph$x
for (i in 1:B){
y.full.sp[,i] = np.st.non[[i]]$graph.support$full.D$data.graph$y +
np.st.non[[i]]$beta["full"]
y.full.sqrt[,i] = p.sqrt.st[[i]]$beta["sqrt(full.D)"]*sqrt(dist) +
p.sqrt.st[[i]]$beta["full"]
y.full.log[,i] = p.log.st[[i]]$beta["log.full.D"]*log(1+dist) +
p.log.st[[i]]$beta["full"]
}
y.full.sp.90CI = apply(y.full.sp, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.full.sqrt.90CI = apply(y.full.sqrt, 1,function(x) quantile(x,prob=c(0.05,0.95)))
y.full.log.90CI = apply(y.full.log, 1,function(x) quantile(x,prob=c(0.05,0.95)))
# combine reg results of different models
data.graph.full.D = data.frame(x = dist,
y.sp = np.semi$graph.support$full.D$data.graph$y +
np.semi$beta["full"],
y05.sp = y.full.sp.90CI[1,],y95.sp = y.full.sp.90CI[2,],
y.sqrt = np.sqrt$beta["sqrt(full.D)"]*sqrt(dist) +
np.sqrt$beta["full"],
y05.sqrt = y.full.sqrt.90CI[1,],y95.sqrt = y.full.sqrt.90CI[2,],
y.log = np.log$beta["log.full.D"]*log(1+dist) +
np.log$beta["full"],
y05.log = y.full.log.90CI[1,],y95.log = y.full.log.90CI[2,])
# graph
g.full = ggplot(data=data.graph.full.D) +
geom_ribbon(aes(x = x,ymin = y05.sp, ymax = y95.sp), fill = "blue",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.sqrt, ymax = y95.sqrt), fill = "red",alpha = 0.4) +
geom_ribbon(aes(x = x,ymin = y05.log, ymax = y95.log), fill = "green",alpha = 0.4) +
geom_line(aes(x=x,y=y.sp),colour="blue") +
geom_line(aes(x=x,y=y.sqrt),colour="red") +
geom_line(aes(x=x,y=y.log),colour="green") +
geom_line(data=data.frame(x=0,y=seq(min(y.D.sqrt.90CI[1,]),max(y.D.sqrt.90CI[2,]),length=1000)),
aes(x=x,y=y)) +
geom_line(data=data.frame(x=np.semi$graph.support$D$data.graph$x,
y=0),aes(x=x,y=y)) +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 12)) +
xlab("Distance (miles)") +
ylab("Utility") +
theme(axis.title = element_text(size = 16),
axis.title.y = element_text(vjust=0.35),
axis.title.x = element_text(vjust=0.15)
)
ggsave(paste(path.write,"g_D_compare.pdf",sep=""))
g.full
install.packages("opencpu")
install.packages("devtools")
library("devtools")
devtools::install_github("R-api","plotly")
install.packages("WDI")
install.packages("gdata")
install.packages("stargazer")
install.packages("mgcv")
install.packages("xtable")
install.packages("plm")
install.packages("RcppArmadillo")
install.packages("landsat")
install.packages("taster")
install.packages("raster")
install.packages("reshape")
install.packages("MatchIt")
install.packages("quadprog")
install.packages("fields")
install.packages("SDMTools")
install.packages("extrafont")
shiny::runApp('ownCloud/MyR/TeachingEconometricsWithR/llnvis')
library(rgdal)
library(data.table)
library(dplyr)
library(ggplot2)
library(raster)
library(grid)
library(knitr)
opts_knit$set(root.dir = '~/Dropbox/khalo.github.com/data')
setwd('~/Dropbox/khalo.github.com/data')
world <- map_data('world') %>% data.table()
world <- world[region!='Antarctica',]
world
install.packages("spdep")
